{
    "openapi": "3.0.0",
    "info": {
      "title": "Authentication API",
      "description": "API for user authentication, registration, password management, and OAuth integration.",
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "http://localhost:3000/api/auth",
        "description": "Local development server"
      }
    ],
    "paths": {
      "/auth/register": {
        "post": {
          "summary": "Register a new user",
          "description": "Registers a new user with the provided details and sends a confirmation email.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUser"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User registered successfully. Confirmation email sent.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RegisterResponse"
                  }
                }
              }
            },
            "409": {
              "description": "Email already exists."
            },
            "400": {
              "description": "Invalid input data."
            }
          }
        }
      },
      "/auth/register/confirm/{token}": {
        "get": {
          "summary": "Confirm user email",
          "description": "Confirms a user's email address using the provided token and generates access and refresh tokens.",
          "parameters": [
            {
              "name": "token",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Email confirmed successfully. Tokens generated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfirmEmailResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid or expired token."
            }
          }
        }
      },
      "/auth/token": {
        "post": {
          "summary": "Refresh access token",
          "description": "Generates a new access token using a valid refresh token.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Access token refreshed successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RefreshTokenResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized: Token is missing."
            },
            "403": {
              "description": "Forbidden: Invalid token."
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "summary": "User login",
          "description": "Authenticates a user and returns access and refresh tokens.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUser"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful. Tokens generated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Email not found."
            },
            "401": {
              "description": "Incorrect password."
            },
            "403": {
              "description": "Email not confirmed."
            }
          }
        }
      },
      "/auth/google": {
        "get": {
          "summary": "Google OAuth login",
          "description": "Redirects the user to Google for OAuth authentication.",
          "responses": {
            "302": {
              "description": "Redirect to Google OAuth."
            }
          }
        }
      },
      "/auth/google/callback": {
        "get": {
          "summary": "Google OAuth callback",
          "description": "Handles the callback from Google OAuth and authenticates the user.",
          "responses": {
            "200": {
              "description": "Authenticated successfully. Tokens generated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OAuthResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication failed."
            }
          }
        }
      },
      "/auth/facebook": {
        "get": {
          "summary": "Facebook OAuth login",
          "description": "Redirects the user to Facebook for OAuth authentication.",
          "responses": {
            "302": {
              "description": "Redirect to Facebook OAuth."
            }
          }
        }
      },
      "/auth/facebook/callback": {
        "get": {
          "summary": "Facebook OAuth callback",
          "description": "Handles the callback from Facebook OAuth and authenticates the user.",
          "responses": {
            "200": {
              "description": "Authenticated successfully. Tokens generated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OAuthResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication failed."
            }
          }
        }
      },
      "/auth/logout": {
        "post": {
          "summary": "User logout",
          "description": "Logs out the user and revokes the access token.",
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Logged out successfully."
            },
            "404": {
              "description": "User not found."
            }
          }
        }
      },
      "/auth/resetPassword": {
        "post": {
          "summary": "Request password reset",
          "description": "Sends a password reset link to the user's email.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgetPasswordRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset email sent. Check your inbox."
            },
            "404": {
              "description": "Email not found."
            }
          }
        }
      },
      "/auth/resetPassword/{token}": {
        "get": {
          "summary": "Verify password reset token",
          "description": "Verifies the password reset token.",
          "parameters": [
            {
              "name": "token",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Token is valid. Proceed to reset password."
            },
            "400": {
              "description": "Invalid or expired token."
            }
          }
        },
        "post": {
          "summary": "Reset user password",
          "description": "Resets the user's password using the provided token.",
          "parameters": [
            {
              "name": "token",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successfully."
            },
            "400": {
              "description": "Invalid or expired token."
            }
          }
        }
      },
      "/users/postInformation": {
        "put": {
          "summary": "Post user information",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                      "weight": {
                        "type": "number"
                      },
                      "height": {
                        "type": "number"
                      },
                      "age": {
                        "type": "number"
                      },
                      "foodDislikes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "trainRate": {
                        "type": "string",
                        "enum": ["none", "light", "moderate", "intense", "extreme"]
                      },
                      "budget": {
                        "type": "string",
                        "enum": ["low", "medium", "high"]
                      },
                      "trainingPlace": {
                        "type": "string",
                        "enum": ["home", "gym", "none"]
                      }
                    }

                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User information saved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "message": { "type": "string" },
                      "data": { "type": "string" }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
                }
              }
            }
          }
        }
      },
      "/users/postGoal": {
        "put": {
          "summary": "Post user goal",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goal": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Goal saved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "message": { "type": "string" },
                      "data": { "type": "string" }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                      "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/postActivityLevel": {
        "put": {
          "summary": "Post user activity level",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activityLevel": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User activity level saved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "message": { "type": "string" },
                      "data": { "type": "string" }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/admin/getUsers": {
        "get": {
          "summary": "Get all users",
          "responses": {
            "200": {
              "description": "Users retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "message": { "type": "string" },
                      "data": { "type": "array", "items": { "type": "object" } }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Failed to retrieve users",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/admin/getUserByEmail": {
        "get": {
          "summary": "Get user by email",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "message": { "type": "string" },
                      "data": { "type": "object" }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Email not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/admin/deleteUserByEmail": {
        "delete": {
          "summary": "Delete user by email",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": { "type": "string" },
                      "message": { "type": "string" },
                      "data": { "type": "object" }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Email not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "RegisterUser": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "minLength": 3,
              "pattern": "^[A-Za-z0-9\\s]+$",
              "example": "john_doe"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string",
              "minLength": 8,
              "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\w]).+$",
              "example": "Password_123"
            },
            "confirmPassword": {
              "type": "string",
              "minLength": 8,
              "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\w]).+$",
              "example": "Password_123"
            }
          },
          "required": ["username", "email", "password", "confirmPassword"]
        },
        "RegisterResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "success"
            },
            "message": {
              "type": "string",
              "example": "Please, confirm your email"
            },
            "data": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "ConfirmEmailResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "success"
            },
            "message": {
              "type": "string",
              "example": "Email is confirmed"
            },
            "data": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refreshToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "RefreshTokenRequest": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          },
          "required": ["token"]
        },
        "RefreshTokenResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "success"
            },
            "message": {
              "type": "string",
              "example": "New access token generated successfully"
            },
            "data": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        },
        "LoginUser": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string",
              "example": "password123"
            }
          },
          "required": ["email", "password"]
        },
        "LoginResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "success"
            },
            "message": {
              "type": "string",
              "example": "Login successful"
            },
            "data": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refreshToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        },
        "OAuthResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "success"
            },
            "message": {
              "type": "string",
              "example": "Authenticated successfully"
            },
            "data": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refreshToken": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "ForgetPasswordRequest": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            }
          },
          "required": ["email"]
        },
        "ResetPasswordRequest": {
          "type": "object",
          "properties": {
            "newPassword": {
              "type": "string",
              "minLength": 8,
              "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\w]).+$",
              "example": "Password_123"
            },
            "confirmNewPassword": {
              "type": "string",
              "minLength": 8,
              "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\w]).+$",
              "example": "Password_123"
            }
          },
          "required": ["newPassword", "confirmNewPassword"]
        },
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "64f7a9b2b3c4d5e6f7a8b9c0"
            },
            "username": {
              "type": "string",
              "example": "john_doe"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string"
            },
            "refreshToken": {
              "type": "string"
            },
            "googleId": {
              "type": "string"
            },
            "facebookId": {
              "type": "string"
            },
            "registerationToken": {
              "type": "string"
            },
            "isConfirmed": {
              "type": "boolean",
              "example": false,
              "default": false
            },
            "role": {
              "type": "string",
              "enum": ["ADMIN", "SUBSCRIBER"],
              "example": "SUBSCRIBER",
              "default": "SUBSCRIBER"
            },
            "resetPasswordToken": {
              "type": "string"
            },
            "info": {
              "$ref": "#/components/schemas/Information"
            },
            "goal": {
              "type": "string",
              "enum": [
                "cardio",
                "diet",
                "bulk fast",
                "clean bulk",
                "maintain weight cutting",
                "maintain weight keep"
              ]
            },
            "activityLevel": {
              "type": "string",
              "enum": ["none", "light", "moderate", "intense", "extreme"]
            }
          }
        },
        "Information": {
          "type": "object",
          "properties": {
            "weight": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "age": {
              "type": "number"
            },
            "foodDislikes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "trainRate": {
              "type": "string",
              "enum": ["none", "light", "moderate", "intense", "extreme"]
            },
            "budget": {
              "type": "string",
              "enum": ["low", "medium", "high"]
            },
            "trainingPlace": {
              "type": "string",
              "enum": ["home", "gym", "none"]
            }
          }
        },
        "errorResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            }
          },
          "example": {
            "status": "error",
            "message": "An unexpected error occurred.",
            "code": 500
          }
        }
      },
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
      
    }
  }

  